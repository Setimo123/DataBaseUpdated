// <auto-generated />
using System;
using Consultation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultation.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Consultation.Domain.ActionLog", b =>
                {
                    b.Property<int>("ActionLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ActionLogID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ActionLogID");

                    b.HasIndex("UsersId");

                    b.ToTable("ActionLog");
                });

            modelBuilder.Entity("Consultation.Domain.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsersID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AdminID");

                    b.HasIndex("UsersID");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            AdminID = 1,
                            AdminName = "Raine Isid",
                            UsersID = "6B187E9D-FD71-4F1D-AFDF-EA1D91E818EF"
                        },
                        new
                        {
                            AdminID = 2,
                            AdminName = "Jiver Dejiga",
                            UsersID = "D81B4D15-B3CD-47D5-96B0-44EF8E39E538"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Bulletin", b =>
                {
                    b.Property<int>("BulletinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BulletinID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FileCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BulletinID");

                    b.ToTable("Bulletin");
                });

            modelBuilder.Entity("Consultation.Domain.ConsultationRequest", b =>
                {
                    b.Property<int>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<string>("Concern")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateSchedule")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisapprovedReason")
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("EndedTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("StartedTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ConsultationID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("StudentID");

                    b.ToTable("ConsultationRequest");

                    b.HasData(
                        new
                        {
                            ConsultationID = 1,
                            Concern = "Need help with calculus problems",
                            DateRequested = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSchedule = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndedTime = new TimeOnly(10, 0, 0),
                            FacultyID = 1,
                            ProgramName = "ME",
                            StartedTime = new TimeOnly(9, 0, 0),
                            Status = 1,
                            StudentID = 1,
                            SubjectCode = "MATH101"
                        },
                        new
                        {
                            ConsultationID = 2,
                            Concern = "Need help with data structures",
                            DateRequested = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSchedule = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndedTime = new TimeOnly(14, 30, 0),
                            FacultyID = 1,
                            ProgramName = "CPE",
                            StartedTime = new TimeOnly(13, 30, 0),
                            Status = 1,
                            StudentID = 2,
                            SubjectCode = "CPE221/L"
                        },
                        new
                        {
                            ConsultationID = 3,
                            Concern = "Follow-up on previous consultation",
                            DateRequested = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSchedule = new DateTime(2025, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisapprovedReason = "Faculty unavailable",
                            EndedTime = new TimeOnly(16, 0, 0),
                            FacultyID = 2,
                            ProgramName = "CE",
                            StartedTime = new TimeOnly(15, 0, 0),
                            Status = 3,
                            StudentID = 1,
                            SubjectCode = "CPE 317/L"
                        },
                        new
                        {
                            ConsultationID = 4,
                            Concern = "Follow-up on previous consultation",
                            DateRequested = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSchedule = new DateTime(2025, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndedTime = new TimeOnly(17, 0, 0),
                            FacultyID = 2,
                            ProgramName = "CE",
                            StartedTime = new TimeOnly(16, 0, 0),
                            Status = 6,
                            StudentID = 1,
                            SubjectCode = "CCPE 315/L"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentName = "CASE",
                            Description = "College of Arts and Sciences Education"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentName = "CBAE",
                            Description = "College of Business Administration Education"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentName = "CEE",
                            Description = "College of Engineering Education"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.EnrolledCourse", b =>
                {
                    b.Property<int>("EnrolledCourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EnrolledCourseID"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<string>("ProgramCourse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrolledCourseID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("StudentID");

                    b.ToTable("EnrolledCourse");

                    b.HasData(
                        new
                        {
                            EnrolledCourseID = 1,
                            CourseCode = "CEE101",
                            CourseName = "Engineering Calculus 1",
                            FacultyID = 1,
                            ProgramCourse = "ECE",
                            SchoolYearID = 1,
                            StudentID = 1
                        },
                        new
                        {
                            EnrolledCourseID = 2,
                            CourseCode = "CEE102/L",
                            CourseName = "PHYSICS 1 FOR ENGINEERS (CALCULUS BASED)",
                            FacultyID = 2,
                            ProgramCourse = "CE",
                            SchoolYearID = 1,
                            StudentID = 1
                        },
                        new
                        {
                            EnrolledCourseID = 3,
                            CourseCode = "CEE108",
                            CourseName = "Statics of Rigid Bodies",
                            FacultyID = 2,
                            ProgramCourse = "CE",
                            SchoolYearID = 1,
                            StudentID = 1
                        },
                        new
                        {
                            EnrolledCourseID = 4,
                            CourseCode = "CEE108",
                            CourseName = "Statics of Rigid Bodies",
                            FacultyID = 2,
                            ProgramCourse = "ME",
                            SchoolYearID = 1,
                            StudentID = 2
                        },
                        new
                        {
                            EnrolledCourseID = 5,
                            CourseCode = "CEE103",
                            CourseName = "Engineering Calculus 2",
                            FacultyID = 2,
                            ProgramCourse = "CHE",
                            SchoolYearID = 2,
                            StudentID = 1
                        },
                        new
                        {
                            EnrolledCourseID = 6,
                            CourseCode = "CEE101",
                            CourseName = "Thermodyanmics 2",
                            FacultyID = 1,
                            ProgramCourse = "ME",
                            SchoolYearID = 2,
                            StudentID = 1
                        },
                        new
                        {
                            EnrolledCourseID = 7,
                            CourseCode = "CPE221/L",
                            CourseName = "Data Structure and Algorithms",
                            FacultyID = 2,
                            ProgramCourse = "CPE",
                            SchoolYearID = 2,
                            StudentID = 1
                        },
                        new
                        {
                            EnrolledCourseID = 8,
                            CourseCode = "CEE104",
                            CourseName = "Differential Equation",
                            FacultyID = 2,
                            ProgramCourse = "EE",
                            SchoolYearID = 3,
                            StudentID = 1
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<string>("FacultyEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FacultyUMID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<string>("UsersID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("FacultyID");

                    b.HasIndex("ProgramID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("UsersID");

                    b.ToTable("Faculty");

                    b.HasData(
                        new
                        {
                            FacultyID = 1,
                            FacultyEmail = "ReyMateo.550200@umindanao.edu.ph",
                            FacultyName = "Rey Mateo",
                            FacultyUMID = "321033",
                            ProgramID = 2,
                            SchoolYearID = 1,
                            UsersID = "53D8F920-EBEC-4DF3-8C53-21F6D123F0D9"
                        },
                        new
                        {
                            FacultyID = 2,
                            FacultyEmail = "JeanelleLabsan.7971@umindanao.edu.ph",
                            FacultyName = "Jeanelle Labsan",
                            FacultyUMID = "797132",
                            ProgramID = 5,
                            SchoolYearID = 2,
                            UsersID = "78B4AF2A-672F-43C5-B819-5F0B407B7187"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.FacultySchedule", b =>
                {
                    b.Property<int>("FacultyScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FacultyScheduleID"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time(6)");

                    b.HasKey("FacultyScheduleID");

                    b.HasIndex("FacultyID");

                    b.ToTable("FacultySchedule");

                    b.HasData(
                        new
                        {
                            FacultyScheduleID = 1,
                            Day = 1,
                            FacultyID = 1,
                            TimeEnd = new TimeOnly(16, 0, 0),
                            TimeStart = new TimeOnly(15, 0, 0)
                        },
                        new
                        {
                            FacultyScheduleID = 2,
                            Day = 5,
                            FacultyID = 2,
                            TimeEnd = new TimeOnly(12, 0, 0),
                            TimeStart = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            FacultyScheduleID = 3,
                            Day = 2,
                            FacultyID = 1,
                            TimeEnd = new TimeOnly(15, 0, 0),
                            TimeStart = new TimeOnly(14, 0, 0)
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationNumber"));

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.HasKey("NotificationNumber");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            NotificationNumber = 1,
                            NotificationMessage = "Hello World",
                            NotificationType = 1
                        },
                        new
                        {
                            NotificationNumber = 2,
                            NotificationMessage = "Hi World",
                            NotificationType = 2
                        },
                        new
                        {
                            NotificationNumber = 3,
                            NotificationMessage = "Jiver Gwapo",
                            NotificationType = 1
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Program", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProgramID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProgramID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Program");

                    b.HasData(
                        new
                        {
                            ProgramID = 1,
                            DepartmentID = 3,
                            Description = "Mechanical Engineering",
                            ProgramName = "ME"
                        },
                        new
                        {
                            ProgramID = 2,
                            DepartmentID = 3,
                            Description = "Civil Engineering",
                            ProgramName = "CE"
                        },
                        new
                        {
                            ProgramID = 3,
                            DepartmentID = 3,
                            Description = "Computer Engineering",
                            ProgramName = "CPE"
                        },
                        new
                        {
                            ProgramID = 4,
                            DepartmentID = 3,
                            Description = "Electrical Engineering",
                            ProgramName = "EE"
                        },
                        new
                        {
                            ProgramID = 5,
                            DepartmentID = 3,
                            Description = "Electronics Engineering",
                            ProgramName = "ECE"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SchoolYearID"));

                    b.Property<int>("SchoolYearStatus")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("Year1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Year2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SchoolYearID");

                    b.ToTable("SchoolYear");

                    b.HasData(
                        new
                        {
                            SchoolYearID = 1,
                            SchoolYearStatus = 1,
                            Semester = 1,
                            Year1 = "2024",
                            Year2 = "2025"
                        },
                        new
                        {
                            SchoolYearID = 2,
                            SchoolYearStatus = 1,
                            Semester = 2,
                            Year1 = "2024",
                            Year2 = "2025"
                        },
                        new
                        {
                            SchoolYearID = 3,
                            SchoolYearStatus = 1,
                            Semester = 3,
                            Year1 = "2024",
                            Year2 = "2025"
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudentUMID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsersID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("yearLevel")
                        .HasColumnType("int");

                    b.HasKey("StudentID");

                    b.HasIndex("ProgramID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("UsersID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = 1,
                            Email = "CedricSetimo.550200@umindanao.edu.ph",
                            ProgramID = 3,
                            SchoolYearID = 1,
                            StudentName = "Cedric Setimo",
                            StudentUMID = "550200",
                            UsersID = "273F528F-5330-411F-9C6B-01543D6249C3",
                            yearLevel = 3
                        },
                        new
                        {
                            StudentID = 2,
                            Email = "EllaineMusni.550200@umindanao.edu.ph",
                            ProgramID = 3,
                            SchoolYearID = 1,
                            StudentName = "Ellaine Musni",
                            StudentUMID = "547343",
                            UsersID = "D0B26692-E380-4374-985F-239B56D06C20",
                            yearLevel = 3
                        });
                });

            modelBuilder.Entity("Consultation.Domain.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UMID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "273F528F-5330-411F-9C6B-01543D6249C3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "CedricSetimo.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CEDRICSETIMO.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "CEDRIC SETIMO",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJyKOwn5cWicqe5lc+G9svXwcZxP9OUnhX0s5JJJyEJJRIUnlztl2+RmF5o6dCNWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "550200",
                            UserName = "Cedric Setimo",
                            UserType = 1
                        },
                        new
                        {
                            Id = "53D8F920-EBEC-4DF3-8C53-21F6D123F0D9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "ReyMateo.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "REYMATEO.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "REY MATEO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIsZjEvCTg6VDOtlZxFSuDM+xtVl7qNoQxQgOw5XS0lL6PBZOaPVN4dwb2doAx4JMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "321033",
                            UserName = "Rey Mateo",
                            UserType = 2
                        },
                        new
                        {
                            Id = "6B187E9D-FD71-4F1D-AFDF-EA1D91E818EF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "RaineIsid.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAINEISID.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "RAINE ISID",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZn9CeGVZHruG8RGQOxPZqHSzvihDotUE0s44qlwOv0KNYs5m932JWvqwrzpMCf6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "444533",
                            UserName = "Raine Isid",
                            UserType = 3
                        },
                        new
                        {
                            Id = "D0B26692-E380-4374-985F-239B56D06C20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "EllaineMusni.550200@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLAINEMUSNI.550200@UMINDANAO.EDU.PH",
                            NormalizedUserName = "ELLAINE MUSNI",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzgS3rXogNWjH66LrLK4SPlSE/fN8h5LBKwtzBLnBufJy2UvZRFZSHV4sZbxEiwsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "547343",
                            UserName = "Ellaine Musni",
                            UserType = 1
                        },
                        new
                        {
                            Id = "1226920F-9508-44B3-845A-ABABBBCBCF5D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "ReggieSoylon.6850@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "REGGIESOYLON.6850@UMINDANAO.EDU.PH",
                            NormalizedUserName = "REGGIE SOYLON",
                            PasswordHash = "AQAAAAIAAYagAAAAEMS+3UMODGmH1NJwGIKpsRbWZxGTBWb24+08oGNzPRDo/YSwJugCQSyXbOeyk9ahfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "685043",
                            UserName = "Reggie Soylon",
                            UserType = 1
                        },
                        new
                        {
                            Id = "0A52E15B-95E6-40FE-9110-9A44817BFF39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "CheleyBalsomo.8998@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHELEYBALSOMO.8998@UMINDANAO.EDU.PH",
                            NormalizedUserName = "CHELEY BALSOMO",
                            PasswordHash = "AQAAAAIAAYagAAAAEPuPQ6osHbW4aouq3jjov9T26dTLjEQqUCDEQmyIPMf0GCMiDb5T7A8kiS4Tw47kcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "899812",
                            UserName = "Cheley Balsomo",
                            UserType = 1
                        },
                        new
                        {
                            Id = "78B4AF2A-672F-43C5-B819-5F0B407B7187",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "JeanelleLabsan.7971@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JEANELLELABSAN.7971@UMINDANAO.EDU.PH",
                            NormalizedUserName = "JEANELLE LABSAN",
                            PasswordHash = "AQAAAAIAAYagAAAAELzS6l73EAT5BC3fWqIhl/udHAafBYrQrY5yEgwXTKw16BGdZj/w6VAIoQxzIGsjxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "797132",
                            UserName = "Jeanelle Labsan",
                            UserType = 2
                        },
                        new
                        {
                            Id = "59CF8531-68E4-466B-BAEC-45305FE16A14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "ChristopherDestajo.9241@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISTOPHERDESTAJO.9241@UMINDANAO.EDU.PH",
                            NormalizedUserName = "CHRISTOPHER DESTAJO",
                            PasswordHash = "AQAAAAIAAYagAAAAEPglrZB5r/OBDFUBAR/df72ml0Gkjd35P2FbfMtmuVUBPzqzmhwrTmUC0gMX5iv5bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "924132",
                            UserName = "Christopher Destajo",
                            UserType = 1
                        },
                        new
                        {
                            Id = "D81B4D15-B3CD-47D5-96B0-44EF8E39E538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef0d9-b045-4b8f-a18f-15f2cbfa219b",
                            Email = "JiverDejiga.3210@umindanao.edu.ph",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JIVERDEJIGA.3210@UMINDANAO.EDU.PH",
                            NormalizedUserName = "JIVER DEJIGA",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+7NyKDUzmsl1qVVgGSgatUUlNV1LaDMDu2XSBKL0+EcXpDj939C0PHGpRKGGYp3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a54c967-0b1f-4c38-bda7-5f94e4c1a3f4",
                            TwoFactorEnabled = false,
                            UMID = "54321",
                            UserName = "Jiver Dejiga",
                            UserType = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultation.Domain.ActionLog", b =>
                {
                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.Admin", b =>
                {
                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.ConsultationRequest", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.EnrolledCourse", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.HasOne("Consultation.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithMany("Faculties")
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("SchoolYear");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.FacultySchedule", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("FacultySchedules")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Consultation.Domain.Program", b =>
                {
                    b.HasOne("Consultation.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.HasOne("Consultation.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithMany("Students")
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("SchoolYear");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultation.Domain.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("EnrolledCourses");

                    b.Navigation("FacultySchedules");
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.Navigation("EnrolledCourses");

                    b.Navigation("Faculties");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("EnrolledCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
